"""
This implements a subspace game zone atop the subspace core protocol.
(thus far it implements very little of the game)
"""
from subspace.core import server
from subspace.game.server import ping, session
from subspace.game import c2s_packet, s2c_packet
from time import sleep
from logging import debug, warn
from threading import Thread, Event, Lock
from Queue import Queue, Empty, Full

class Zone:
    
    def __init__(self, address, auto_start=True):
        # this will contain all registered packet handlers
        # the lock protects this from adds/gets during _receiving_loop 
        self._packet_handlers_lock = Lock()
        self._packet_handlers = {}
        
        self._local_packet_handlers = {
            c2s_packet.ArenaLogin._id : self._handle_arena_login,
        }
        self.add_packet_handlers(**self._local_packet_handlers)
        self._address = address
        self._conn = server.Server(self._address)
        self._shutting_down = Event()
        self._threads = {
            "recv"  : Thread(target=self._receiving_loop,name="Zone:recv")
            }
        # ping address occurs on port + 1
        ping_address = address[0], address[1] + 1
        self._ping = ping.PingZone(ping_address, self)
        self._sessions = session.SessionManager(self)
    
    def start(self):
        self._ping.start()
        for thread_name, thread in self._threads.iteritems():
            debug("starting thread %s" % thread_name)
            thread.start()

    def _handle_arena_login(self, address, raw_packet):
        login_p = c2s_packet.ArenaLogin(raw_packet)
        #self._conn.send(address, s2c_packet.ArenaEntered(), reliable=True)
        # until we load ship settings from file, here is a block of them
        raw_settings = ''.join(chr(x) for x in [
0x0f, 0x01, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00,#chunk 1 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0xfa, 0x00, 
0x37, 0x00, 0x32, 0x00, 0x2c, 0x01, 0x32, 0x00, 
0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
0xc8, 0x00, 0xf4, 0x01, 0x5e, 0x01, 0x16, 0x00, 
0xac, 0x0d, 0x14, 0x05, 0xd0, 0x07, 0x2b, 0x01, 
0x15, 0x00, 0xab, 0x0d, 0x13, 0x05, 0xcf, 0x07, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
0x01, 0x00, 0x7d, 0x00, 0x1e, 0x00, 0x3c, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x44, 0x80, 0x56, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x58, 0x1b, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0x05, 0x00, 0xf4, 0x01, 
0x14, 0x00, 0x2d, 0x00, 0x2c, 0x01, 0x32, 0x00, 
0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
0xc8, 0x00, 0xc8, 0x00, 0xe6, 0x00, 0x13, 0x00, 
0xa0, 0x0f, 0xc8, 0x00, 0xac, 0x0d, 0xe4, 0x00, 
0x11, 0x00, 0x9e, 0x0f, 0xc7, 0x00, 0xb7, 0x0b, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xac, 0x0d, 
0x01, 0x00, 0x7d, 0x00, 0x1a, 0x00, 0x32, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x0f, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x00, 0x01, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 
0x44, 0x80, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
0x50, 0x00, 0x78, 0x00, 0x2c, 0x01, 0x32, 0x00, 
0x2c, 0x01, 0x96, 0x00, 0x70, 0x17, 0xd0, 0x07, 
0x01, 0x00, 0x26, 0x02, 0x64, 0x00, 0x4d, 0x01, 
0x64, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x11, 0x00, 
0xac, 0x0d, 0xb0, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
0x10, 0x00, 0xab, 0x0d, 0xaf, 0x04, 0xa3, 0x06, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
0x01, 0x00, 0x7d, 0x00, 0x28, 0x00, 0x73, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x46, 0x80, 0x7e, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
0x23, 0x00, 0x2d, 0x00, 0x52, 0x03, 0x00, 0x00, 
0xbc, 0x02, 0x96, 0x00, 0xd0, 0x07, 0x40, 0x06, 
0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
0xc8, 0x00, 0xf4, 0x01, 0xd2, 0x00, 0x12, 0x00,# chunk end
0x48, 0x0d, 0x65, 0x04, 0x08, 0x07, 0xd1, 0x00,# chunk 2 
0x11, 0x00, 0x47, 0x0d, 0x64, 0x04, 0x07, 0x07, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x84, 0x03, 0xb8, 0x0b, 
0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
0x96, 0x00, 0x9b, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x02, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x14, 0x82, 0xd6, 0x03, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
0x2d, 0x00, 0x37, 0x00, 0x26, 0x02, 0x32, 0x00, 
0x2c, 0x01, 0x96, 0x00, 0x8c, 0x0a, 0x08, 0x07, 
0x01, 0x00, 0xbc, 0x01, 0x64, 0x00, 0x64, 0x00, 
0x64, 0x00, 0x96, 0x00, 0x40, 0x01, 0x10, 0x00, 
0x8c, 0x0a, 0x7e, 0x04, 0x6c, 0x07, 0x3f, 0x01, 
0x0f, 0x00, 0x8b, 0x0a, 0x7d, 0x04, 0x6b, 0x07, 
0x00, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x00, 0x00, 0xb8, 0x0b, 
0x01, 0x00, 0x7d, 0x00, 0x23, 0x00, 0x37, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x02, 0x01, 
0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 
0x44, 0xa0, 0xaa, 0x06, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
0x23, 0x00, 0x2d, 0x00, 0x2c, 0x01, 0x32, 0x00, 
0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
0x01, 0x00, 0xf4, 0x01, 0x4b, 0x00, 0x3c, 0x00, 
0xc8, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x13, 0x00, 
0xac, 0x0d, 0x7e, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
0x12, 0x00, 0xab, 0x0d, 0x7d, 0x04, 0xa3, 0x06, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
0x00, 0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x44, 0xa8, 0x56, 0x09, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
0x23, 0x00, 0x2d, 0x00, 0x7c, 0x01, 0x32, 0x00, 
0x90, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xa0, 0x0f, 
0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
0xc8, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x11, 0x00, 
0xac, 0x0d, 0x7e, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
0x10, 0x00, 0xab, 0x0d, 0x7d, 0x04, 0xa3, 0x06, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x00, 0x00, 0xdc, 0x05, 
0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
0x4b, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, # chunk end
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, # chunk 3 (tail)
0x0c, 0x00, 0x40, 0x00, 0x88, 0x13, 0x01, 0x0c, 
0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 
0x88, 0xa0, 0x56, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
0xc4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x2d, 0x00, 0x32, 0x00, 0x2c, 0x01, 0x32, 0x00, 
0xfa, 0x00, 0x96, 0x00, 0xc4, 0x09, 0xd0, 0x07, 
0x01, 0x00, 0x58, 0x02, 0xc8, 0x00, 0x2c, 0x01, 
0xc8, 0x00, 0x5e, 0x01, 0x18, 0x01, 0x12, 0x00, 
0xb2, 0x0c, 0x65, 0x04, 0xd6, 0x06, 0x17, 0x01, 
0x11, 0x00, 0xab, 0x0d, 0x64, 0x04, 0xd5, 0x06, 
0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xdc, 0x05, 
0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x3c, 0x00, 
0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xb8, 0x0b, 
0x0c, 0x00, 0xc8, 0x00, 0xf0, 0x0a, 0x02, 0x18, 
0x03, 0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x01, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x88, 0x80, 0x6a, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x50, 0x34, 0x03, 0x00, 
0x30, 0x8c, 0x11, 0x00, 0x2c, 0x01, 0x00, 0x00, 
0x70, 0x17, 0x00, 0x00, 0xb8, 0x0b, 0x00, 0x00, 
0x20, 0xbf, 0x02, 0x00, 0x40, 0x1f, 0x00, 0x00, 
0x02, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x00, 0x00, 
0x50, 0x46, 0x00, 0x00, 0x40, 0x0d, 0x03, 0x00, 
0x48, 0xe8, 0x01, 0x00, 0x70, 0x17, 0x00, 0x00, 
0xb8, 0x0b, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
0x7c, 0x15, 0x00, 0x00, 0xb8, 0x0b, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 
0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x64, 0x00, 
0x0a, 0x00, 0x46, 0x00, 0xe8, 0x03, 0x41, 0x00, 
0xbc, 0x02, 0x58, 0x02, 0x03, 0x00, 0x0f, 0x00, 
0x16, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xe1, 0x00, 0x90, 0x01, 0xf4, 0x01, 
0x01, 0x00, 0x01, 0x00, 0x94, 0x11, 0xfa, 0x00, 
0x96, 0x00, 0x03, 0x00, 0x40, 0x1f, 0xa0, 0x0f, 
0x2c, 0x01, 0x0e, 0x01, 0xe8, 0x03, 0xfe, 0xff, 
0x90, 0x01, 0x20, 0x03, 0x0f, 0x00, 0xb8, 0x0b, 
0x32, 0x00, 0x58, 0x02, 0xee, 0x02, 0x80, 0x00, 
0x70, 0x17, 0xc8, 0x00, 0x20, 0x03, 0xe8, 0x03, 
0x1e, 0x00, 0xf4, 0x01, 0xee, 0x02, 0xdc, 0x05, 
0x00, 0x00, 0x14, 0x00, 0xc8, 0x00, 0xd0, 0x07, 
0x03, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0x08, 0x05, 
0x01, 0x00, 0x00, 0x00, 0x01, 0x19, 0x01, 0x00, 
0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x1e, 0x06, 0x06, 0xb4, 0xb4, 0xb4, 0x06, 0x06, 
0x06, 0x84, 0x06, 0x06, 0x06, 0x00, 0x68, 0xe0, 
0x00, 0x00, 0x2c, 0xb4, 0xf0, 0xf0, 0x68, 0x00, 
0x3c, 0x00, 0x68, 0x68])
        debug("Sending chunked settings")
        self._conn.send_chunked(address, s2c_packet.ArenaSettings(raw_settings))
        # send him his player id
        player = self._sessions.get_player(address)
        # TODO: check if player is None
        p = s2c_packet.PlayerID(player_id=player.id)
        self._conn.send(address, p, reliable=True)
        for entering_player in self._sessions.players:
            if entering_player is not None:
                p = s2c_packet.PlayerEntering(player_id=entering_player.id,
                                              name=entering_player.name)
                debug("notifying of entering player %s" % entering_player.name)
                self._conn.send(address, p, reliable=True)
                
        p = s2c_packet.MapInformation(''.join(chr(x) for x in [
                    0x29, 0x61, 0x73, 0x77, 0x7a, 0x2e, 0x6c, 
                    0x76, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    0x00, 0x00, 0x27, 0x27, 0x11, 0xb7, 0x9b, 0x8c, 
                    0x00, 0x00]))
        self._conn.send(address, p, reliable=True)
        p = s2c_packet.ArenaEntered()
        self._conn.send(address, p, reliable=True)
        # TODO the rest of the cluster (bricks, flags, etc. - see login_cont.c)

    def _receiving_loop(self):
        while not self._shutting_down.is_set():
            try:
                address, raw_packet = self._conn.recv(timeout=1.0)
            except Empty:
                continue
            if raw_packet is None: # core spits out None to signal disconnect
                debug("%s:%d hung up on us" % address)
                continue
            packet_id = raw_packet[0]
            with self._packet_handlers_lock:
                handlers = self._packet_handlers.get(packet_id,[])[:]
                # we make a copy of this packet's handlers so we can unlock
            if len(handlers) < 1:
                warn("unhandled game packet (len=%d, id=0x%s) %s" % 
                            (len(raw_packet), packet_id.encode("hex"),
                           ' '.join([x.encode("hex") for x in raw_packet])))
            else:
                for hnd in handlers: 
                    hnd(address,raw_packet)

    def player_count(self):
        return 32 #TODO: implement player_count for the ping server

    def add_packet_handlers(self, **new_packet_handlers):
        """
        This permits other classes to register as a handler for a specified 
        game packet.  Internally, it adds all id:func entries from new_handlers
        to the table of packet handlers for type id, contained at key=id in
        self._packet_handlers.
        """
        with self._packet_handlers_lock:
            for id, fn in new_packet_handlers.iteritems():
                self._packet_handlers.setdefault(id,[]).append(fn)
        
    def shutdown(self):
        self._shutting_down.set()
        self._ping.shutdown()
        debug("closing threads")
        for thread_name, thread in self._threads.iteritems():
            thread.join(3.0) # give each thread 3s to join
        self._conn.shutdown()

def main():
    
    from random import randint
    from subspace.game.client.player import Player
    import logging
    logging.basicConfig(level=logging.DEBUG,
        format="<%(threadName)25.25s > %(message)s")
    # creates zone, attempts 10 player logins
    # all are inspected and rejected, until Zone is properly implemented
    z = Zone(("127.0.0.1", 5000))
    z.start()
    p = {}
    for i in range(10):
        p[i] = Player("divtest"+str(i), "password", ("127.0.0.1", 5000))
        p[i].login(timeout=0) 
    sleep(5)
    for i in range(10):
        if p[i].arena_entered.is_set():
            print i, "login success"
            p[i].logout()
        else:
            print i, "login failure"
            p[i].logout()
    sleep(1)
    z.shutdown()

def run():
    import logging
    logging.basicConfig(level=logging.DEBUG,
        format="<%(threadName)25.25s > %(message)s")
    z = Zone(("127.0.0.1", 5000))
    z.start()
    sleep(60)
    z.shutdown()
    
if __name__ == '__main__':
    run()