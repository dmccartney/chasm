
from subspace.game import c2s_packet, s2c_packet
from logging import debug, warn
from threading import RLock
from struct import unpack_from
from binascii import crc32
from string import printable

MAX_PLAYERS = 256

class SessionManager:
    """
    This handles login packets and maintains the zone-wide list of logged-in
    player sessions and their corresponding IDs.  The player ID is used in many
    game packets to identify a player in the current session.  These IDs are
    reused for later players and are not useful outside of the current session
    context.  They are seats on the bus, not the riders.  Player game data that
    survives logout/login should be keyed to player name, not ID.
    
    A player can be fetched by id or by address (where address is a tuple
    containing: ip/hostname, port).  See get_player(). 
    
    This class sends s2c_packet's LoginResp, LoginComplete, and PlayerID.
    """
    
    def __init__(self, zone):
        self._sessions = {} # player IDs indexed by address
        self._session_lock = RLock()
        self._local_packet_handlers = {
            c2s_packet.SessionLoginVIE._id  : self._handle_session_login_vie,
            c2s_packet.SessionLoginCont._id : self._handle_session_login_cont,
            zone.DISCONNECT_PACKET_ID       : self._handle_disconnect,
            }
        self.checksums = ContinuumChecksums(zone.cfg["checksums"])
        self._zone = zone
        self.players = [None for x in range(MAX_PLAYERS)]
        self.player_count = 0 # we keep the count apart
        zone.add_packet_handlers(**self._local_packet_handlers)

    def __str__(self):
        return "Players: %s" % ', '.join([str(p) for p in self.players 
                                            if p is not None])

    def get_player(self, address = None, id = None):
        if id is None:
            id = self._get_player_id(address)
        return self.players[id] if id != -1 and id != 0 else None
        
    def process_login(self, address, login_packet):
        """ 
        Whether VIE or Cont, the client login attempts are handled, ultimately,
        by this method.  (See _handle_login_vie/_cont which both invoke this.)
        """
        if address in self._sessions: # atomic, we don't need to lock to check
            warn("Second Login from %s:%d" % address)
            warn("%s" % login_packet)
            return # TODO: investigate why we seem to be getting 2nd login pkt
        p = login_packet
        p.name = self._clean_player_name(p.name)
        debug("%s is trying to login" % p.name.rstrip('\x00'))
        if self.check_login(p.name, p.password):
            player = self._add_player_session(address, p.name)
            login_resp = s2c_packet.SessionLoginResponse(server_version=134)
            login_comp = s2c_packet.SessionLoginComplete()
            player.send(login_resp, reliable=True)
            player.send(login_comp, reliable=True)
        else:
            self._zone.core.send(address, 
                    s2c_packet.SessionLoginResponse(response=2)) # bad pwd
    
    def check_login(self, name, password):
        return True # TODO: implement authentication
    
    def process_logout(self, address):
        self._remove_player_session(address)

    def _add_player_session(self, address, name):
        """ This returns a new player using the next available player_id """
        # NOTE: we will never assign player id = 0
        for id in range(1,len(self.players)):
            if self.players[id] is None:
                self.players[id] = Player(self._zone, id, address, name)
                self.player_count += 1
                with self._session_lock:
                    self._sessions[address] = id
                return self.players[id]
        warn("Max players reached!  No player ID available")
        return None
    
    def _remove_player_session(self, address):
        """ This removes the player having the provided address """
        with self._session_lock:
            if address in self._sessions:
                id = self._sessions[address]
                self.player_count -= 1
                self.players[id] = None
                del self._sessions[address]

    def _get_player_id(self, address):
        """ 
        Given an address, this returns the corresponding player ID.
        It returns -1 on error. 
        """
        with self._session_lock:
            if address in self._sessions:
                return self._sessions[address]
            else:
                warn("No player ID for requested address: %s:%d" % address)
                return -1

    def _clean_player_name(self, name):
        """ 
        Given a player name, this return it, cleaned up.  
        If it is invalid, this returns None.
        """
        # cut it to 19 characters
        # strip whitespace at the start or end
        # remove any non-printable and any colons
        name = ''.join(x for x in name[:19].strip() if x in printable and x != ':')
        if name[0].isalnum(): # must begin with a number or letter
            return name
        else:
            return None        

    def _handle_session_login_vie(self, address, raw_packet):
        p = c2s_packet.SessionLoginVIE(raw_packet)
        self.process_login(address, p)
        
    def _handle_session_login_cont(self, address, raw_packet):
        # this sends the continuum version and checksum so the client can
        # know if it is "up to date" -- cont does this different than did VIE
        cont_version_p = s2c_packet.SessionContVersion(
                           continuum_version = self.checksums.version,
                           continuum_exe_checksum = self.checksums.exe_checksum)
        self._zone.core.send(address, cont_version_p, reliable=True)
        p = c2s_packet.SessionLoginCont(raw_packet)
        self.process_login(address, p)

    def _handle_disconnect(self, address, raw_packet):
        """ raw_packet should be None """
        self.process_logout(address)

class Player:
    
    def __init__(self, zone, id, address, name):
        self._zone, self.id, self.address, self.name = zone, id, address, name
        self.ship = self.freq = self.arena = None
        self.x = self.y = self.dx = self.dy = 0
    
    def __str__(self):
        """ A printable string for this player: "name(id=#) """
        return "%s (id=%d)(%s:%d)" % \
                (self.name, self.id, self.address[0], self.address[1])
    
    def send(self, packet, **args):
        """ 
        This convenience function reaches into the zone to tell the core to
        send to this player's address
        """
        self._zone.core.send(self.address, packet, **args)
    
    def send_chunked(self, packet, **args):
        """ 
        This convenience functions reach into the zone to tell the core to
        send to this player's address
        """
        self._zone.core.send_chunked(self.address, packet, **args)
    
    def send_session_id(self):
        login_pid = s2c_packet.SessionPlayerID(player_id = self.id)
        self.send(login_pid, reliable = True)

    def send_ship_settings(self, settings):
        # until we load ship settings from file, here is a block of them
        raw_settings = ''.join(chr(x) for x in [
            0x0f, 0x01, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00,#chunk 1 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0xfa, 0x00, 
            0x37, 0x00, 0x32, 0x00, 0x2c, 0x01, 0x32, 0x00, 
            0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
            0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
            0xc8, 0x00, 0xf4, 0x01, 0x5e, 0x01, 0x16, 0x00, 
            0xac, 0x0d, 0x14, 0x05, 0xd0, 0x07, 0x2b, 0x01, 
            0x15, 0x00, 0xab, 0x0d, 0x13, 0x05, 0xcf, 0x07, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
            0x01, 0x00, 0x7d, 0x00, 0x1e, 0x00, 0x3c, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x44, 0x80, 0x56, 0x01, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x58, 0x1b, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0x05, 0x00, 0xf4, 0x01, 
            0x14, 0x00, 0x2d, 0x00, 0x2c, 0x01, 0x32, 0x00, 
            0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
            0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
            0xc8, 0x00, 0xc8, 0x00, 0xe6, 0x00, 0x13, 0x00, 
            0xa0, 0x0f, 0xc8, 0x00, 0xac, 0x0d, 0xe4, 0x00, 
            0x11, 0x00, 0x9e, 0x0f, 0xc7, 0x00, 0xb7, 0x0b, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xac, 0x0d, 
            0x01, 0x00, 0x7d, 0x00, 0x1a, 0x00, 0x32, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x0f, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x00, 0x01, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 
            0x44, 0x80, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
            0x50, 0x00, 0x78, 0x00, 0x2c, 0x01, 0x32, 0x00, 
            0x2c, 0x01, 0x96, 0x00, 0x70, 0x17, 0xd0, 0x07, 
            0x01, 0x00, 0x26, 0x02, 0x64, 0x00, 0x4d, 0x01, 
            0x64, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x11, 0x00, 
            0xac, 0x0d, 0xb0, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
            0x10, 0x00, 0xab, 0x0d, 0xaf, 0x04, 0xa3, 0x06, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
            0x01, 0x00, 0x7d, 0x00, 0x28, 0x00, 0x73, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x46, 0x80, 0x7e, 0x01, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
            0x23, 0x00, 0x2d, 0x00, 0x52, 0x03, 0x00, 0x00, 
            0xbc, 0x02, 0x96, 0x00, 0xd0, 0x07, 0x40, 0x06, 
            0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
            0xc8, 0x00, 0xf4, 0x01, 0xd2, 0x00, 0x12, 0x00,# chunk end
            0x48, 0x0d, 0x65, 0x04, 0x08, 0x07, 0xd1, 0x00,# chunk 2 
            0x11, 0x00, 0x47, 0x0d, 0x64, 0x04, 0x07, 0x07, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x84, 0x03, 0xb8, 0x0b, 
            0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
            0x96, 0x00, 0x9b, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x02, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x14, 0x82, 0xd6, 0x03, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
            0x2d, 0x00, 0x37, 0x00, 0x26, 0x02, 0x32, 0x00, 
            0x2c, 0x01, 0x96, 0x00, 0x8c, 0x0a, 0x08, 0x07, 
            0x01, 0x00, 0xbc, 0x01, 0x64, 0x00, 0x64, 0x00, 
            0x64, 0x00, 0x96, 0x00, 0x40, 0x01, 0x10, 0x00, 
            0x8c, 0x0a, 0x7e, 0x04, 0x6c, 0x07, 0x3f, 0x01, 
            0x0f, 0x00, 0x8b, 0x0a, 0x7d, 0x04, 0x6b, 0x07, 
            0x00, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x00, 0x00, 0xb8, 0x0b, 
            0x01, 0x00, 0x7d, 0x00, 0x23, 0x00, 0x37, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x02, 0x01, 
            0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 
            0x44, 0xa0, 0xaa, 0x06, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
            0x23, 0x00, 0x2d, 0x00, 0x2c, 0x01, 0x32, 0x00, 
            0x2c, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xd0, 0x07, 
            0x01, 0x00, 0xf4, 0x01, 0x4b, 0x00, 0x3c, 0x00, 
            0xc8, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x13, 0x00, 
            0xac, 0x0d, 0x7e, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
            0x12, 0x00, 0xab, 0x0d, 0x7d, 0x04, 0xa3, 0x06, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xb8, 0x0b, 
            0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, 
            0x0c, 0x00, 0x40, 0x00, 0xc4, 0x09, 0x01, 0x0c, 
            0x00, 0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x44, 0xa8, 0x56, 0x09, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0xdc, 0x05, 0x64, 0x00, 
            0x23, 0x00, 0x2d, 0x00, 0x7c, 0x01, 0x32, 0x00, 
            0x90, 0x01, 0x96, 0x00, 0xd0, 0x07, 0xa0, 0x0f, 
            0x01, 0x00, 0xf4, 0x01, 0x64, 0x00, 0x4d, 0x01, 
            0xc8, 0x00, 0xf4, 0x01, 0xe6, 0x00, 0x11, 0x00, 
            0xac, 0x0d, 0x7e, 0x04, 0xa4, 0x06, 0xe5, 0x00, 
            0x10, 0x00, 0xab, 0x0d, 0x7d, 0x04, 0xa3, 0x06, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x00, 0x00, 0xdc, 0x05, 
            0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x32, 0x00, 
            0x4b, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, # chunk end
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xc4, 0x09, # chunk 3 (tail)
            0x0c, 0x00, 0x40, 0x00, 0x88, 0x13, 0x01, 0x0c, 
            0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 
            0x88, 0xa0, 0x56, 0x01, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00, 
            0xc4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x2d, 0x00, 0x32, 0x00, 0x2c, 0x01, 0x32, 0x00, 
            0xfa, 0x00, 0x96, 0x00, 0xc4, 0x09, 0xd0, 0x07, 
            0x01, 0x00, 0x58, 0x02, 0xc8, 0x00, 0x2c, 0x01, 
            0xc8, 0x00, 0x5e, 0x01, 0x18, 0x01, 0x12, 0x00, 
            0xb2, 0x0c, 0x65, 0x04, 0xd6, 0x06, 0x17, 0x01, 
            0x11, 0x00, 0xab, 0x0d, 0x64, 0x04, 0xd5, 0x06, 
            0x28, 0x00, 0x02, 0x00, 0xfa, 0x00, 0xa6, 0x00, 
            0x64, 0x00, 0xb0, 0x04, 0x90, 0x01, 0xdc, 0x05, 
            0x01, 0x00, 0x7d, 0x00, 0x19, 0x00, 0x3c, 0x00, 
            0x96, 0x00, 0x7d, 0x00, 0x20, 0x03, 0x32, 0x00, 
            0x19, 0x00, 0x35, 0x00, 0x37, 0x00, 0xb8, 0x0b, 
            0x0c, 0x00, 0xc8, 0x00, 0xf0, 0x0a, 0x02, 0x18, 
            0x03, 0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x01, 
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x88, 0x80, 0x6a, 0x01, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x50, 0x34, 0x03, 0x00, 
            0x30, 0x8c, 0x11, 0x00, 0x2c, 0x01, 0x00, 0x00, 
            0x70, 0x17, 0x00, 0x00, 0xb8, 0x0b, 0x00, 0x00, 
            0x20, 0xbf, 0x02, 0x00, 0x40, 0x1f, 0x00, 0x00, 
            0x02, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x00, 0x00, 
            0x50, 0x46, 0x00, 0x00, 0x40, 0x0d, 0x03, 0x00, 
            0x48, 0xe8, 0x01, 0x00, 0x70, 0x17, 0x00, 0x00, 
            0xb8, 0x0b, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
            0x7c, 0x15, 0x00, 0x00, 0xb8, 0x0b, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 
            0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x64, 0x00, 
            0x0a, 0x00, 0x46, 0x00, 0xe8, 0x03, 0x41, 0x00, 
            0xbc, 0x02, 0x58, 0x02, 0x03, 0x00, 0x0f, 0x00, 
            0x16, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0xe1, 0x00, 0x90, 0x01, 0xf4, 0x01, 
            0x01, 0x00, 0x01, 0x00, 0x94, 0x11, 0xfa, 0x00, 
            0x96, 0x00, 0x03, 0x00, 0x40, 0x1f, 0xa0, 0x0f, 
            0x2c, 0x01, 0x0e, 0x01, 0xe8, 0x03, 0xfe, 0xff, 
            0x90, 0x01, 0x20, 0x03, 0x0f, 0x00, 0xb8, 0x0b, 
            0x32, 0x00, 0x58, 0x02, 0xee, 0x02, 0x80, 0x00, 
            0x70, 0x17, 0xc8, 0x00, 0x20, 0x03, 0xe8, 0x03, 
            0x1e, 0x00, 0xf4, 0x01, 0xee, 0x02, 0xdc, 0x05, 
            0x00, 0x00, 0x14, 0x00, 0xc8, 0x00, 0xd0, 0x07, 
            0x03, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0x08, 0x05, 
            0x01, 0x00, 0x00, 0x00, 0x01, 0x19, 0x01, 0x00, 
            0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x1e, 0x06, 0x06, 0xb4, 0xb4, 0xb4, 0x06, 0x06, 
            0x06, 0x84, 0x06, 0x06, 0x06, 0x00, 0x68, 0xe0, 
            0x00, 0x00, 0x2c, 0xb4, 0xf0, 0xf0, 0x68, 0x00, 
            0x3c, 0x00, 0x68, 0x68])
        self.send_chunked(s2c_packet.ArenaSettings(raw_settings))

class ContinuumChecksums():
    
    def __init__(self, checksum_configuration):
        self._checksum_cfg = checksum_configuration
        self.recalculate_checksums()
    
    def recalculate_checksums(self, new_configuration = None):
        if new_configuration is not None:
            self._checksum_cfg = new_configuration
        self.exe_checksum = self._calc_exe_checksum(self._checksum_cfg["exe_path"])
        self.csum_file = self._calc_csum_file(self._checksum_cfg["scrty_path"])
        self.version = self._checksum_cfg["version"]
        
    def _calc_exe_checksum(self, file):
        exe_sum = 0
        try:
            with open(file, "rb") as f:
                for line in f:
                    exe_sum = crc32(line, exe_sum)
        except IOError:
            warn("Continuum EXE file not found at '%s'" % file)
            exe_sum = -1
        return exe_sum & 0xffffffff
    
    def _calc_csum_file(self, file):
        code_sum = 0
        try:
            with open(file, "rb") as f:
                f.seek(4)
                code_sum = unpack_from("I",f.read(4))[0]
        except IOError:
            warn("Continuum scrty file not found at '%s'" % file)
        return code_sum & 0xffffffff